from matplotlib import pyplot as plt
from matplotlib.ticker import MultipleLocator

from utils import get_log_name

plt.rcParams["font.family"] = "SimHei"
# 解决中文乱码
plt.rcParams['font.sans-serif'] = 'SimHei'
plt.rcParams['axes.unicode_minus'] = False
# 解决负号无法显示的问题
plt.rcParams['axes.unicode_minus'] =False

plt.rcParams['font.size'] = 25
plt.rcParams['xtick.direction'] = 'in'#将x周的刻度线方向设置向内
plt.rcParams['ytick.direction'] = 'in'#将y轴的刻度方向设置向内


def error1():
    import pandas as pd

    import numpy as np

    labels = ["sample number", "2d-BPNN", "AGA-2d-BPNN", "Actual value", "GA-2d-BPNN"              ]
    labels = ["样本编号", "真实值","AGA-PLSR", "AGA-BPNN", "AGA-AdaBoost", "Stacking","改进Stacking"              ]
    x = np.array(np.arange(1,93), dtype=int)

    def tra(s):

        return np.array( list(map(float, s[1:-1].split())), dtype=float)

    x = np.array(np.arange(1, 93))



    a = tra("""[72. 72. 73. 73. 72. 72. 70. 70. 70. 70. 64. 64. 63. 63. 64. 64. 62. 62.
 62. 62. 43. 43. 46. 34. 34. 31. 31. 72. 72. 66. 66. 62. 62. 62. 62. 62.
 62. 58. 58. 74. 74. 72. 72. 72. 72. 62. 62. 59. 59. 53. 53. 70. 70. 60.
 60. 61. 61. 54. 54. 52. 52. 51. 51. 71. 71. 55. 55. 63. 63. 60. 60. 46.
 46. 73. 73. 71. 71. 67. 67. 59. 59. 10. 10. 63. 73. 46. 62. 72. 61. 51.
 60. 46.]""")

    b = tra("""[70.96470493 68.46419265 74.07349357 72.61409383 71.30574665 73.30033323
 69.52531804 68.49364474 70.68142738 70.86879129 65.25520221 61.57316831
 62.2351579  61.75827113 66.33787604 61.61906771 64.96803396 62.68039343
 61.08259463 65.34946517 43.84271388 45.2372205  38.98240781 35.26044747
 37.70440386 31.65144199 32.11167336 69.35868908 71.08645655 63.99122039
 66.42822119 60.18929806 60.26089798 62.48863216 62.90332359 59.8540572
 62.62607239 61.11400551 59.37161215 71.09973161 74.29249067 72.10183999
 73.98518547 70.3388349  72.7675748  63.37309571 61.50542288 62.05973396
 60.47268858 56.6422956  58.42787763 71.45767817 71.81465743 61.4245469
 60.53698038 62.44751489 59.84382861 59.45624382 53.78107829 53.14244554
 50.34895765 48.71750057 46.41210363 69.33349972 72.31049065 51.93876979
 54.9905993  60.57939308 60.87039435 64.25471384 62.48565042 46.36651501
 45.25502359 71.92748975 70.63234856 69.79245427 70.23437156 68.1651707
 69.44126469 54.41831752 58.78491828  9.78910725 10.14000616 61.85963694
 72.83771276 38.34105034 61.34468213 72.56261456 61.19350234 49.27616923
 63.58311995 48.25517068]""")

    c = tra("""[0.740436   0.70044665 0.6951539  0.68969673 0.68507237 0.70813322
 0.6856774  0.70265297 0.6891015  0.69467556 0.64344487 0.63371698
 0.63391699 0.63433583 0.63126668 0.62861643 0.61730428 0.63258729
 0.6199934  0.64250049 0.44951926 0.46225387 0.38739604 0.31518796
 0.3371557  0.30416688 0.30048485 0.70810062 0.73728061 0.68971789
 0.66485467 0.59786493 0.6122364  0.62514622 0.61935104 0.59842598
 0.59872814 0.59427077 0.55846132 0.73507036 0.72841273 0.70243718
 0.69008124 0.70004634 0.72310936 0.62599018 0.6080379  0.62701192
 0.60445735 0.52185181 0.52684835 0.71679286 0.69845098 0.59088971
 0.59182213 0.61522208 0.6205964  0.60298592 0.54166626 0.50511908
 0.52779787 0.48661229 0.54872581 0.71491136 0.73250477 0.55014817
 0.54639981 0.63672729 0.62134044 0.61447242 0.61201666 0.48740645
 0.46230441 0.72672059 0.72345018 0.69012671 0.70672277 0.66055833
 0.66905379 0.58250979 0.59236792 0.11393543 0.10136942 0.63294006
 0.68768013 0.46387925 0.60955951 0.72852345 0.61759972 0.49058615
 0.60865459 0.45703445]""")*100




    f = """[71.95089286 72.5        71.10714286 73.         72.         72.25
 70.         70.59375    70.625      70.625      62.         63.08198925
 63.08198925 62.95       63.50752688 64.         62.         62.
 62.         62.         43.         46.         46.         34.
 34.         31.         31.         72.         72.         64.5
 66.25       62.         62.         62.         62.         61.16458333
 61.16458333 60.43333333 55.         72.         73.75       70.75
 73.         72.         72.         62.         62.         60.
 60.68333333 53.         53.         70.         70.         59.86111111
 59.86111111 61.16458333 61.16458333 55.         54.         54.
 51.08333333 51.         51.77083333 70.41666667 71.95089286 55.
 55.         63.08198925 62.         61.16458333 61.16458333 47.4375
 46.         72.         73.         70.51041667 71.         66.75
 68.91666667 58.93692865 58.93692865 10.         10.         63.08198925
 73.         46.         62.         72.         61.16458333 51.
 61.16458333 46.        ]"""
    def traA(s):
        return np.array([float(x) for x in s[1:-1].split()])

    d = traA("""[71.         72.         68.175      72.         72.         72.
 70.         71.         70.         70.         62.         63.21111111
 63.21111111 63.19375    62.78797468 63.5        62.         62.
 62.18404908 62.         43.         49.         46.         34.
 34.         31.         31.         72.         72.         66.
 66.         62.         62.         62.         61.98148148 61.
 61.58333333 60.5        56.         72.         73.         72.
 72.5        72.         72.         62.01041667 62.         59.5
 60.5        53.16216216 53.16216216 70.         70.         60.
 60.         61.         61.03125    55.5        53.         53.11111111
 52.         51.         49.         67.         71.         55.
 55.         63.         63.         61.         60.68404908 48.5
 46.         71.5        72.5        71.         70.5        67.
 67.         59.         59.         10.         10.         63.16031746
 73.         46.         62.         72.         61.         51.
 60.         46.        ]""")

    e = """[0.73275125 0.72162971 0.69361037 0.69708721 0.72444006 0.72257951
 0.6979999  0.71548277 0.69456513 0.70225047 0.64160514 0.63898158
 0.62613133 0.62553668 0.63463551 0.63013658 0.62245828 0.62757718
 0.61356831 0.6409903  0.49152239 0.49083137 0.42151712 0.33847375
 0.33646509 0.3266862  0.32299071 0.70243927 0.72363788 0.64694817
 0.66562505 0.62736423 0.61759945 0.62603608 0.62684094 0.6098061
 0.65280975 0.59793757 0.55908206 0.7392096  0.72089609 0.72172832
 0.68574432 0.69295314 0.71903102 0.62717376 0.61435386 0.62450589
 0.60545428 0.53910471 0.54621846 0.70638844 0.70693292 0.61042174
 0.59931664 0.61164201 0.60585852 0.58757861 0.51816998 0.5232742
 0.49865603 0.49479845 0.50326681 0.69897684 0.72042494 0.53022487
 0.54835385 0.62216845 0.59801827 0.64490815 0.62302147 0.48444869
 0.45566708 0.71328872 0.724125   0.70486382 0.69652381 0.66533163
 0.68445251 0.57160069 0.59138596 0.10907078 0.1025959  0.62476452
 0.70722701 0.4070147  0.63195874 0.71994239 0.60960952 0.50272161
 0.63827127 0.46575583]"""
    e = tra(e) * 100

    f = traA(f)


    x = x


    print("BPNN: {:.3f},GA-BPNN: {:.3f},AGA-BPNN:{:.3f}".format(np.absolute(a-c).mean(),np.absolute(d-c).mean(),np.absolute(b-c).mean()))
    fig = plt.figure(figsize=(16, 8))
    # plt.plot(x,elu,label="Elu")
    # plt.plot(x,LeakyRelu,label="LeakyRelu")
    # plt.plot(x,Relu,label="Relu")
    # ax = fig.add_subplot(1,2,  1)

    # fig.subplots_adjust(wspace=0.3, hspace=0.3)
    ax = plt.gca()
    # 把x轴的刻度间隔设置为1，并存在变量里
    x_major_locator = MultipleLocator(10)
    # 把y轴的刻度间隔设置为10，并存在变量里

    ax.xaxis.set_major_locator(x_major_locator)
    data = [a,b,c,d,e,f]
    c = ["#00BFFF","#FFA500", "m", "b", "g" , "r"]
    for i,y in enumerate(data):

        plt.plot(x,y,lw=3,linestyle='-',color=c[i])

    # ax.set_title("(a)")
        # plt.xlabel(u"波长 WaveLength/nm\n {}".format(l[i]))
    # plt.xlabel(labels[0],fontdict=30)
    ax.set_xlabel(labels[0], fontsize=30)
    ax.set_ylabel("含水率(%)", fontsize=30)
    # plt.ylabel("含水率(%)",fontdict=30)
    # plt.plot(x, d, label=labels[4], color="orange", lw=2)
    plt.legend(labels[1:])


    name = get_log_name("bpnn", "pdf", "./bpnn")
    print("save picture in {}".format(name))
    plt.savefig(name)
    plt.show()


def error2():
    import pandas as pd

    import numpy as np

    labels = ["sample number", "2d-BPNN", "AGA-2d-BPNN", "Actual value", "GA-2d-BPNN"              ]
    labels = ["样本编号", "真实值","AGA-PLSR", "AGA-BPNN", "AGA-AdaBoost", "Stacking","改进Stacking"              ]
    x = np.array(np.arange(1,93), dtype=int)

    def tra(s):

        return np.array( list(map(float, s[1:-1].split())), dtype=float)

    x = np.array(np.arange(1, 93))



    a = tra("""[72. 72. 73. 73. 72. 72. 70. 70. 70. 70. 64. 64. 63. 63. 64. 64. 62. 62.
 62. 62. 43. 43. 46. 34. 34. 31. 31. 72. 72. 66. 66. 62. 62. 62. 62. 62.
 62. 58. 58. 74. 74. 72. 72. 72. 72. 62. 62. 59. 59. 53. 53. 70. 70. 60.
 60. 61. 61. 54. 54. 52. 52. 51. 51. 71. 71. 55. 55. 63. 63. 60. 60. 46.
 46. 73. 73. 71. 71. 67. 67. 59. 59. 10. 10. 63. 73. 46. 62. 72. 61. 51.
 60. 46.]""")

    b = tra("""[70.96470493 68.46419265 74.07349357 72.61409383 71.30574665 73.30033323
 69.52531804 68.49364474 70.68142738 70.86879129 65.25520221 61.57316831
 62.2351579  61.75827113 66.33787604 61.61906771 64.96803396 62.68039343
 61.08259463 65.34946517 43.84271388 45.2372205  38.98240781 35.26044747
 37.70440386 31.65144199 32.11167336 69.35868908 71.08645655 63.99122039
 66.42822119 60.18929806 60.26089798 62.48863216 62.90332359 59.8540572
 62.62607239 61.11400551 59.37161215 71.09973161 74.29249067 72.10183999
 73.98518547 70.3388349  72.7675748  63.37309571 61.50542288 62.05973396
 60.47268858 56.6422956  58.42787763 71.45767817 71.81465743 61.4245469
 60.53698038 62.44751489 59.84382861 59.45624382 53.78107829 53.14244554
 50.34895765 48.71750057 46.41210363 69.33349972 72.31049065 51.93876979
 54.9905993  60.57939308 60.87039435 64.25471384 62.48565042 46.36651501
 45.25502359 71.92748975 70.63234856 69.79245427 70.23437156 68.1651707
 69.44126469 54.41831752 58.78491828  9.78910725 10.14000616 61.85963694
 72.83771276 38.34105034 61.34468213 72.56261456 61.19350234 49.27616923
 63.58311995 48.25517068]""")

    c = tra("""[0.740436   0.70044665 0.6951539  0.68969673 0.68507237 0.70813322
 0.6856774  0.70265297 0.6891015  0.69467556 0.64344487 0.63371698
 0.63391699 0.63433583 0.63126668 0.62861643 0.61730428 0.63258729
 0.6199934  0.64250049 0.44951926 0.46225387 0.38739604 0.31518796
 0.3371557  0.30416688 0.30048485 0.70810062 0.73728061 0.68971789
 0.66485467 0.59786493 0.6122364  0.62514622 0.61935104 0.59842598
 0.59872814 0.59427077 0.55846132 0.73507036 0.72841273 0.70243718
 0.69008124 0.70004634 0.72310936 0.62599018 0.6080379  0.62701192
 0.60445735 0.52185181 0.52684835 0.71679286 0.69845098 0.59088971
 0.59182213 0.61522208 0.6205964  0.60298592 0.54166626 0.50511908
 0.52779787 0.48661229 0.54872581 0.71491136 0.73250477 0.55014817
 0.54639981 0.63672729 0.62134044 0.61447242 0.61201666 0.48740645
 0.46230441 0.72672059 0.72345018 0.69012671 0.70672277 0.66055833
 0.66905379 0.58250979 0.59236792 0.11393543 0.10136942 0.63294006
 0.68768013 0.46387925 0.60955951 0.72852345 0.61759972 0.49058615
 0.60865459 0.45703445]""")*100




    f = """[71.95089286 72.5        71.10714286 73.         72.         72.25
 70.         70.59375    70.625      70.625      62.         63.08198925
 63.08198925 62.95       63.50752688 64.         62.         62.
 62.         62.         43.         46.         46.         34.
 34.         31.         31.         72.         72.         64.5
 66.25       62.         62.         62.         62.         61.16458333
 61.16458333 60.43333333 55.         72.         73.75       70.75
 73.         72.         72.         62.         62.         60.
 60.68333333 53.         53.         70.         70.         59.86111111
 59.86111111 61.16458333 61.16458333 55.         54.         54.
 51.08333333 51.         51.77083333 70.41666667 71.95089286 55.
 55.         63.08198925 62.         61.16458333 61.16458333 47.4375
 46.         72.         73.         70.51041667 71.         66.75
 68.91666667 58.93692865 58.93692865 10.         10.         63.08198925
 73.         46.         62.         72.         61.16458333 51.
 61.16458333 46.        ]"""
    def traA(s):
        return np.array([float(x) for x in s[1:-1].split()])

    d = traA("""[71.         72.         68.175      72.         72.         72.
 70.         71.         70.         70.         62.         63.21111111
 63.21111111 63.19375    62.78797468 63.5        62.         62.
 62.18404908 62.         43.         49.         46.         34.
 34.         31.         31.         72.         72.         66.
 66.         62.         62.         62.         61.98148148 61.
 61.58333333 60.5        56.         72.         73.         72.
 72.5        72.         72.         62.01041667 62.         59.5
 60.5        53.16216216 53.16216216 70.         70.         60.
 60.         61.         61.03125    55.5        53.         53.11111111
 52.         51.         49.         67.         71.         55.
 55.         63.         63.         61.         60.68404908 48.5
 46.         71.5        72.5        71.         70.5        67.
 67.         59.         59.         10.         10.         63.16031746
 73.         46.         62.         72.         61.         51.
 60.         46.        ]""")

    e = """[0.73275125 0.72162971 0.69361037 0.69708721 0.72444006 0.72257951
 0.6979999  0.71548277 0.69456513 0.70225047 0.64160514 0.63898158
 0.62613133 0.62553668 0.63463551 0.63013658 0.62245828 0.62757718
 0.61356831 0.6409903  0.49152239 0.49083137 0.42151712 0.33847375
 0.33646509 0.3266862  0.32299071 0.70243927 0.72363788 0.64694817
 0.66562505 0.62736423 0.61759945 0.62603608 0.62684094 0.6098061
 0.65280975 0.59793757 0.55908206 0.7392096  0.72089609 0.72172832
 0.68574432 0.69295314 0.71903102 0.62717376 0.61435386 0.62450589
 0.60545428 0.53910471 0.54621846 0.70638844 0.70693292 0.61042174
 0.59931664 0.61164201 0.60585852 0.58757861 0.51816998 0.5232742
 0.49865603 0.49479845 0.50326681 0.69897684 0.72042494 0.53022487
 0.54835385 0.62216845 0.59801827 0.64490815 0.62302147 0.48444869
 0.45566708 0.71328872 0.724125   0.70486382 0.69652381 0.66533163
 0.68445251 0.57160069 0.59138596 0.10907078 0.1025959  0.62476452
 0.70722701 0.4070147  0.63195874 0.71994239 0.60960952 0.50272161
 0.63827127 0.46575583]"""
    e = tra(e) * 100

    f = traA(f)


    x = x


    print("BPNN: {:.3f},GA-BPNN: {:.3f},AGA-BPNN:{:.3f}".format(np.absolute(a-c).mean(),np.absolute(d-c).mean(),np.absolute(b-c).mean()))
    fig = plt.figure(figsize=(16, 8))
    # plt.plot(x,elu,label="Elu")
    # plt.plot(x,LeakyRelu,label="LeakyRelu")
    # plt.plot(x,Relu,label="Relu")
    # ax = fig.add_subplot(1,2,  1)

    # fig.subplots_adjust(wspace=0.3, hspace=0.3)
    ax = plt.gca()
    # 把x轴的刻度间隔设置为1，并存在变量里
    x_major_locator = MultipleLocator(10)
    # 把y轴的刻度间隔设置为10，并存在变量里

    ax.xaxis.set_major_locator(x_major_locator)
    data = [b,c,d,e,f]
    c = ["#00BFFF", "#FFA500", "m", "b", "g", "r"]

    for i,y in enumerate(data):
        p = a-y
        print(f"{np.min(p):.4f} {np.max(p):.4f} {np.mean(np.abs(p)):.4f}")
        plt.plot(x,p,lw=3,linestyle='-',color = c[i+1])
    # ax.set_title("(a)")
        # plt.xlabel(u"波长 WaveLength/nm\n {}".format(l[i]))
    # plt.xlabel(labels[0],fontdict=30)
    ax.set_xlabel(labels[0], fontsize=30)
    ax.set_ylabel("含水率偏差(%)", fontsize=30)
    # plt.ylabel("含水率(%)",fontdict=30)
    # plt.plot(x, d, label=labels[4], color="orange", lw=2)
    plt.legend(labels[2:])


    name = get_log_name("bpnn", "pdf", "./bpnn")
    print("save picture in {}".format(name))
    plt.savefig(name)
    plt.show()


# error1()
error2()