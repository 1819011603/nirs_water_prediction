import ast

import numpy as np

array = np.array([0.72, 0.72, 0.73, 0.73, 0.72, 0.72, 0.7, 0.7, 0.7, 0.7, 0.64, 0.64, 0.63, 0.63, 0.64, 0.64, 0.62, 0.62, 0.62, 0.62, 0.43, 0.43, 0.46, 0.34, 0.34, 0.31, 0.31, 0.72, 0.72, 0.66, 0.66, 0.62, 0.62, 0.62, 0.62, 0.62, 0.62, 0.58, 0.58, 0.74, 0.74, 0.72, 0.72, 0.72, 0.72, 0.62, 0.62, 0.59, 0.59, 0.53, 0.53, 0.7, 0.7, 0.6, 0.6, 0.61, 0.61, 0.54, 0.54, 0.52, 0.52, 0.51, 0.51, 0.71, 0.71, 0.55, 0.55, 0.63, 0.63, 0.6, 0.6, 0.46, 0.46, 0.73, 0.73, 0.71, 0.71, 0.67, 0.67, 0.59, 0.59, 0.1, 0.1, 0.63, 0.73, 0.46, 0.62, 0.72, 0.61, 0.51, 0.6, 0.46])


def tra(s):
    return np.array(list(map(float, s[1:-1].split())), dtype=float)


a = """[0.72 0.72 0.73 0.73 0.72 0.72 0.7  0.7  0.7  0.7  0.64 0.64 0.63 0.63
 0.64 0.64 0.62 0.62 0.62 0.62 0.43 0.43 0.46 0.34 0.34 0.31 0.31 0.72
 0.72 0.66 0.66 0.62 0.62 0.62 0.62 0.62 0.62 0.58 0.58 0.74 0.74 0.72
 0.72 0.72 0.72 0.62 0.62 0.59 0.59 0.53 0.53 0.7  0.7  0.6  0.6  0.61
 0.61 0.54 0.54 0.52 0.52 0.51 0.51 0.71 0.71 0.55 0.55 0.63 0.63 0.6
 0.6  0.46 0.46 0.73 0.73 0.71 0.71 0.67 0.67 0.59 0.59 0.1  0.1  0.63
 0.73 0.46 0.62 0.72 0.61 0.51 0.6  0.46]"""

a = tra(a) * 100

b = """[[0.71624446]
 [0.72045323]
 [0.74741513]
 [0.72385032]
 [0.69169756]
 [0.73451911]
 [0.69425561]
 [0.6974272 ]
 [0.70009323]
 [0.70725393]
 [0.66114643]
 [0.60436542]
 [0.59396985]
 [0.60340959]
 [0.65161558]
 [0.60390923]
 [0.67153452]
 [0.65262793]
 [0.60913953]
 [0.65660242]
 [0.47938927]
 [0.48020473]
 [0.42872505]
 [0.35910767]
 [0.37358038]
 [0.32900164]
 [0.33229204]
 [0.69518523]
 [0.7079341 ]
 [0.63218234]
 [0.66174811]
 [0.61425095]
 [0.59285505]
 [0.63749311]
 [0.62571624]
 [0.60164029]
 [0.62965974]
 [0.59389644]
 [0.57380817]
 [0.73327318]
 [0.73084681]
 [0.72511493]
 [0.71108442]
 [0.70486793]
 [0.7251864 ]
 [0.61156826]
 [0.58290843]
 [0.61887017]
 [0.61872895]
 [0.53858782]
 [0.54097582]
 [0.70134783]
 [0.70088118]
 [0.61407566]
 [0.59351909]
 [0.60819184]
 [0.59668604]
 [0.59457588]
 [0.54832429]
 [0.55522636]
 [0.50756306]
 [0.48151108]
 [0.48223635]
 [0.69646509]
 [0.72958951]
 [0.5425503 ]
 [0.54939782]
 [0.58076811]
 [0.57849449]
 [0.64028876]
 [0.62742495]
 [0.49827834]
 [0.45603025]
 [0.72407165]
 [0.71645689]
 [0.69841653]
 [0.699377  ]
 [0.66385075]
 [0.68806893]
 [0.56724262]
 [0.58747525]
 [0.09311754]
 [0.09941394]
 [0.61064374]
 [0.72447298]
 [0.40962291]
 [0.61490656]
 [0.72355126]
 [0.59455847]
 [0.49839534]
 [0.64041431]
 [0.48753164]]"""

b = """[0.73278325 0.7217251  0.6936027  0.69718239 0.72440614 0.72260114
 0.69801684 0.71535785 0.69450978 0.70220476 0.64159996 0.6389559
 0.62608502 0.62544685 0.63465806 0.63010973 0.62239853 0.62758116
 0.61354495 0.64106407 0.4915376  0.49083192 0.42152107 0.33845828
 0.33646735 0.32665604 0.32298402 0.70247116 0.72373074 0.64706689
 0.66564391 0.62741199 0.61764299 0.62611619 0.62694309 0.6097822
 0.65288791 0.59796811 0.55906836 0.73917244 0.72081777 0.72167953
 0.68581954 0.69293137 0.71904987 0.62715037 0.61430996 0.62452651
 0.60550153 0.53915006 0.54623823 0.70632988 0.70689436 0.61046902
 0.59934195 0.6116531  0.60588943 0.58765631 0.51810259 0.52327082
 0.49867021 0.49482153 0.50318277 0.69896962 0.72043608 0.53004139
 0.54830116 0.6222379  0.59808802 0.64502093 0.62314411 0.48445322
 0.4556907  0.71336698 0.72413119 0.7049133  0.69659329 0.66530965
 0.68446876 0.57162924 0.5914598  0.10912013 0.10255716 0.62472857
 0.70722092 0.40703137 0.63203708 0.71992165 0.60961466 0.50271838
 0.638378   0.46575309]"""

b = """[70.73230586 69.49162701 73.75138008 72.9061279  73.97173529 73.8576537
 69.82309935 71.06925954 70.81972451 70.02946792 62.16417262 59.32014809
 62.22664355 61.77323178 64.20526688 61.79275013 63.62278261 61.9997719
 60.67132097 64.82727761 45.55060009 45.07491189 42.77344226 36.69341493
 37.97021402 33.79759619 32.11289491 72.09190584 71.85203952 62.72526657
 67.47811221 62.58109569 60.9863751  63.18599666 63.58190381 59.55268007
 64.34444616 62.49609967 59.84257202 72.46306807 73.51158115 73.17387484
 73.33030423 73.21941162 73.31851803 62.49473339 61.16992036 61.15721951
 61.33364452 54.29453237 55.68684976 69.41454167 70.06060447 60.64806084
 58.93231821 61.11085304 58.43057393 58.69034135 54.70762255 53.93162977
 52.08984752 51.87027479 50.73419585 68.02943281 70.41435267 52.68967101
 54.26248887 56.98111335 57.02282427 62.78036001 64.1039422  47.5730452
 46.43489041 70.15936192 71.03275078 68.53861065 68.69549681 66.4951654
 68.76343492 53.69174797 57.39007108  9.43118366 10.3545189  61.62258329
 73.06285352 40.27580827 62.77746758 72.30826479 60.46824764 51.09706236
 62.9933487  49.77019761]"""

b = """[74.69127001 70.99008624 70.8256852  71.62488841 72.9473152  72.009458
 68.7428136  70.55754002 69.95758269 70.27453758 62.06752334 63.29200064
 64.62066554 64.66256241 63.39752123 63.16972317 61.39009492 62.46119016
 61.35939229 62.99864952 44.90867958 44.2162215  40.11428673 31.74580637
 34.32397935 30.81755446 30.95082866 71.04720685 73.99773788 66.87707222
 66.24295745 59.94244098 60.79699748 63.55296007 63.98622767 60.52397376
 57.8311223  58.76381537 55.50342081 74.23230508 72.72671277 71.24551406
 69.15708275 71.42283908 72.86226499 62.07536572 61.57999074 60.12892802
 60.31585452 52.76618509 52.60344213 71.1321035  70.23852645 60.05953201
 58.93921773 61.13437481 61.72797831 56.2939832  53.3081193  50.66148197
 52.89698001 49.14941231 52.01402109 71.45668523 72.1858749  54.31586841
 56.07978746 63.11648486 60.95664959 62.4286087  61.04021702 49.52227588
 46.43106875 74.25350071 72.68832753 69.47805059 71.4105573  66.97732451
 68.06423494 58.0468784  59.61366142 10.19934962 10.02344332 63.7047429
 72.93145096 45.74908719 60.87639743 72.08928239 61.35939079 49.95581731
 60.82686649 45.99773883]"""

b = """[0.740436   0.70044665 0.6951539  0.68969673 0.68507237 0.70813322
 0.6856774  0.70265297 0.6891015  0.69467556 0.64344487 0.63371698
 0.63391699 0.63433583 0.63126668 0.62861643 0.61730428 0.63258729
 0.6199934  0.64250049 0.44951926 0.46225387 0.38739604 0.31518796
 0.3371557  0.30416688 0.30048485 0.70810062 0.73728061 0.68971789
 0.66485467 0.59786493 0.6122364  0.62514622 0.61935104 0.59842598
 0.59872814 0.59427077 0.55846132 0.73507036 0.72841273 0.70243718
 0.69008124 0.70004634 0.72310936 0.62599018 0.6080379  0.62701192
 0.60445735 0.52185181 0.52684835 0.71679286 0.69845098 0.59088971
 0.59182213 0.61522208 0.6205964  0.60298592 0.54166626 0.50511908
 0.52779787 0.48661229 0.54872581 0.71491136 0.73250477 0.55014817
 0.54639981 0.63672729 0.62134044 0.61447242 0.61201666 0.48740645
 0.46230441 0.72672059 0.72345018 0.69012671 0.70672277 0.66055833
 0.66905379 0.58250979 0.59236792 0.11393543 0.10136942 0.63294006
 0.68768013 0.46387925 0.60955951 0.72852345 0.61759972 0.49058615
 0.60865459 0.45703445]"""

b = """[66.04       68.98064516 68.20681332 70.8595445  71.52166667 69.84
 67.144      71.264      65.01535354 66.30454113 61.06886339 63.32561336
 63.4335527  63.31206945 62.68585498 63.26670211 62.42348403 62.46085316
 62.44031312 61.89380002 44.28566667 48.94427466 45.04       34.6
 37.         33.1        31.         71.08912836 71.75504203 66.96205031
 66.14052495 61.83671736 62.03216899 62.8527359  62.04460019 61.5106859
 61.62424619 60.58174622 56.82314662 71.22663162 72.42154576 69.50189125
 72.20261237 72.06330203 72.04330203 64.4920872  63.52627361 59.89816099
 61.11977158 54.41039728 54.32064009 69.71710623 69.98567766 60.09902417
 60.1060359  61.35976432 61.38496688 55.4380546  53.70355662 54.76510812
 51.00534411 52.0003838  50.18       68.1309697  70.60567766 57.86078421
 56.65298574 62.76030952 61.75849672 61.67947598 60.95828271 47.92714671
 46.47142857 71.18994443 71.59412698 69.59406651 69.82832917 66.91678592
 66.91496774 58.50418093 60.19594018 10.         10.         63.43906096
 72.9        46.         61.83431905 72.19966567 61.15680676 50.94218204
 61.18865411 46.28      ]"""


b = """[71.         72.         68.175      72.         72.         72.
 70.         71.         70.         70.         62.         63.21111111
 63.21111111 63.19375    62.78797468 63.5        62.         62.
 62.18404908 62.         43.         49.         46.         34.
 34.         31.         31.         72.         72.         66.
 66.         62.         62.         62.         61.98148148 61.
 61.58333333 60.5        56.         72.         73.         72.
 72.5        72.         72.         62.01041667 62.         59.5
 60.5        53.16216216 53.16216216 70.         70.         60.
 60.         61.         61.03125    55.5        53.         53.11111111
 52.         51.         49.         67.         71.         55.
 55.         63.         63.         61.         60.68404908 48.5
 46.         71.5        72.5        71.         70.5        67.
 67.         59.         59.         10.         10.         63.16031746
 73.         46.         62.         72.         61.         51.
 60.         46.        ]"""


b = """[70.88867115 68.35072744 74.23435488 72.73526394 71.15799317 73.31362055
 69.46961294 68.42385966 70.52982017 70.80593589 65.29507712 61.68387745
 62.38246025 61.69086672 66.29600374 61.61160266 65.03974172 62.87523097
 61.12837927 65.52991518 43.85333345 45.28132657 38.99002628 35.30407436
 37.80570645 31.83823116 32.23379849 69.33670184 70.94588175 64.01919196
 66.43153203 60.30695696 60.35279917 62.53642414 62.92240557 59.85263457
 62.68998827 61.14257877 59.3851905  71.04561411 74.16593083 72.14600525
 73.9550958  70.39273337 72.79016062 63.37332922 61.4474381  62.0528995
 60.48902292 56.75097225 58.40491232 71.46239013 71.6996822  61.47086167
 60.53251518 62.45494927 59.915642   59.40090287 53.69781488 53.13742269
 50.33691434 48.74723328 46.42713852 69.3432693  72.26625287 51.91337965
 54.93094972 60.5884971  60.85455905 64.33501529 62.53777859 46.4540413
 45.34141765 71.97432585 70.6228144  69.89895801 70.39276583 68.01276194
 69.46098742 54.48540339 58.84629563  9.81121979 10.10198296 61.9490292
 72.87013694 38.42258768 61.41933036 72.5718804  61.2240887  49.27356973
 63.642446   48.28642259]"""

def string_to_numpy_array(string):
    # 将字符串转换为NumPy数组
    array = string.replace("\n","")
    array =np.fromstring(array.replace('[', '').replace(']', '').replace('\n', ''), dtype=float, sep=' ')
    # 将一维数组转换为二维数组（列数为1）

    return  array.ravel() * 100 if array[0] < 1  else  array.ravel()


b = string_to_numpy_array(b)
from main import paint


def string_to_numpy_array(string):
    # 将字符串分割成一个由数字构成的列表
    values = string.strip().split('\t')
    # 将字符串列表转换为float类型的NumPy数组
    array = np.fromiter(values, dtype=np.float)
    return array


f = "0.9701	0.0217	0.9651	0.0234	5.3544"
f = "0.9721	0.0210	0.9760	0.0194	6.4587"
f = "0.9625	0.0263	0.9678	0.0225	5.5746"
f = "0.9957	0.0082	0.9870	0.0143	8.7730"
f = "0.9941	0.0094	0.9772	0.0189	6.6286"
f = "0.9896	0.0125	0.9801	0.0177	7.0815"
f = "0.9970	0.0051	0.9915	0.0116	10.8345"
f = "0.9653	0.0233	0.9664	0.0230	5.4571"
f = string_to_numpy_array(f)

paint(a,b,f[0],f[1]*100,f[2],f[3]*100,f[4],"")
